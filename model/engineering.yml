engineering-module:
   name: Model
   path: model
   owners: pavel:this
   issues:
     - name: Validation of duplicate paths in containing collection and duplicate URI's                         
     - name: Support of objectives and key results                         
     - name: Journey inheritance
       description: Override/overriden, suppress, inheritance of default values for features.                         
     - name: Support of Multi-criteria decision analysis - different methods - AHP, Weighted sum, Weighted product                         
     - name: Icons for model elements      
     - name: Introduce Edition  
     - name: Contact methods, resolving by
       description: For example, engineer's e-mail(s) and resolving by mailto:<email> URI.  
     - name: OKR
       markdown-description: |+2              
         Add support of [OKR](https://en.wikipedia.org/wiki/OKR). Endeavor contains objectives. 
         Objectives reference Endeavor. E.g. month objectives, quarter objectives, release or feature objectives.
         Objective may contain sub-objectives and may reference parent objective - mutually exclusive - contained objective cannot reference a parent.
         Validations of objectives hierarchy, end of the contained objective endeavor shall be before the end of the containing objective endeavor.
         
         Objectives can contain key results. Both objectives and key results are Aims and endeavors can be aligned to them. Validation that aligned endeavors
         end before the objective endeavor.
         
         Both objective and key result have ``weight`` with default value ``1`` and derived ``completion`` attributes. 
         Completion for key results is computed as weighted completion of aligned endeavors. Maybe add weight to Alignment with default 1 and do not take total effort into
         account. If there is a mix of sub-objectives and key results and alignments they are all objective contributors with weights. 
         On the objective page show 3 tables - sub-objectives (children), key results, alignments.  
          
         ### Old notes 
          
         Objectives can be nested and can reference a parent objective, e.g. Engineer's containing organization objective. Nested objective can't have parent reference.
         Objectives can reference increments. E.g. 2021 Q3 objective.
         Objectives may contain key results. Objectives and key results may have weight which determines how much they contribute to container/parent.
         Objectives may contain issues. Issues may contribute either to objectives directly or to key results. Benefit may be used as issue weight or additional attribute.
         Maybe EngineeredCapability shall be contributing, so release or feature may contribute.
         Contribution class with weight and target. Default weight is 1, target is the default feature. 
         Aim is a base class for Objective and Key Result. Concrete - for proxying.
         Ability to manually set progress in aims - value between 0 and 1. This value will be added to the value of contributions.
         Contributions count in aim progress only when they are available - done, released, ... 
         Although effort/cost based progress may also be computed.  
         Maybe an objective shall be able to contribute to key results and thus instead of parent link it shall have that contirbutes reference.
         I.e. Contributions are done to Aim by Contributors - Objectives, Key results, EngineeredCapabilities. Contained aims have weight attribute which means their contribution to the container.  
         Objectives may have benefit and that benefit may be used to compute effective benefit for contributors based on their weight. 
         Objectives being contributors themselves also have effectiveBenefit. As such it should be possible to define benefits only for top-level objectives and compute
         effective benefits down to issues. As "leaf" benefits are likely to be very small numbers they may be normalized to 1 for the largest benefit and also ranked. 
         Issues can be sorted in the order of decreasing effective benefit. 
     - name: Notes from Git commit history
       markdown-description: |+2
         Flag to enable - true by default.
         Look for a YAML block in commit comments, e.g. something starting with --- Engineering --- and ending with --- End Engineering ---
         Parse as YAML - issue key with issue URI. Also time spent and remaining effort. Engineer - find by committer e-mail or explicitly specify.
         As part of it or before it (in 2021.5.0) - add support of referencing engineers by e-mail - AbstractGenerateSiteConsumerFactory getURI() to getURIs() or boolean matchURI().
         Engineering block does not go to the note description. Decide how to treat commit contents - markdown by default and a flag to overrie to treat as plain text? 
     - name: Domain or Portfolio
       markdown-description: |+2
         Grouping of products, may contain child domains/portfolios. 
     - name: Metrics/Measurements
       markdown-description: |+2
         Grouping of products, may contain child domains/portfolios. 
     - name: Activity duration/cost
       markdown-description: |+2
         To compute duration/costs of journeys. Ideally/eventually - a distribution for activity and distributions for journeys.
     - name: Resources allocation for activities and journeys
       markdown-description: |+2
         Banker's algorithm or something similar.
     - name: Issue effective status 
       markdown-description: |+2
         Derived from the last note status if not set explicitly. Default to the first status found by walking up the hierarchy of containment first and owning engineer second.
     - name: Remove immutable collections from derived many-references
     - name: Validation of unsatisfied requirements
       markdown-description: |+2
         Not available requirement which is not scheduled for the same increment or an increment before the scheduled increment.
         Validate only for issues/engineered capabilities scheduled for increments directly or inderectly via releases or features.
         Report at increment and release/feature levels as well as on the issue level? 
     - name: Validation of issue increment after the release increment
     - name: Computing default increment from the end date.
     - name: Activity steps
       markdown-description: |+2
         Section actions, paragraphs. Engineered elements. URL with fragment. The goal is to allow maintaining issue and owners at a step level as well as discussion forums. 
         Also allow to maintain steps in their own files.
         Leverage list of contents. Steps can be nested.
     - name: Generated org charts
       markdown-description: |+2
         Visualization of org structure. Configurable number of levels up and down. People-based or org based or combined - org name and head (owner) in parenthesis with individually linking to the org and the owner.
         Option to specify whether to show individual engineers or just organizations. An option to show headcount - title with token expansion - ``name``, ``owner``, ``head-count``, ``total-head-count``. For leaf orgs at the bottom show total headcount.
         Auto depth based on the total number of orgs to be shown, e.g. specify that max-shapes is 10 then no more than 10 orgs will be shown. For leaf orgs use a visual differentiator, e.g. a different border to show that there is more.
         Engineers are boxless nodes? Support of multiple visualizations - many containment reference org-charts - homogenous, strict containment.
     - name: Engineer reference/proxy
       description: To define cross-functional teams. Show differently in org charts. Bi-directional reference, take into account in assignments. Other attributes are read-only delegating to the target.      
     - name: External issue
       markdown-description: |+2
         Support of issues tracked elsewhere. Solve at the resource loading level by using specialized resource factories. Top-down and bottom-up approaches.         
     - name: Configurable representations (diagrams)
       markdown-description: |+2
         Issues and other model elements have representation reference and different representations, which can be model-element specific. E.g. Gantt, WBS, or state diagram for issues and WBS (org chart) for organizations.
         Representations are rendered as section actions. Composite representation - style - cards, pills, ... Cards columns. Charts can be introduced this way.           
     - name: Journey element input artifacts (requirements) and output artifacts (deliverables)
       markdown-description: Infer transition artifacts from journey element artirfacts and vice-versa, validations of consistency, e.g. an output transition lists an artifact which is not in the list of journey element deliverables.
     - name: Capacity, allocation, utilization calculation and validation
       markdown-description: |+2
         Total of increment issues does not exceed allocation if it is present. If an issue is worked over multiple increments use issue start/end to pro-rate. 
         Total of allocations does not exceed capacity.
         Utilization, two levels - a) engineer capacity is allocated b) allocations are utilized by assigning issues. Configurable validations and under/over allocation margins - context service?
         For allocation compute utilization from issue notes. For capacity from allocations. Capacity shall be allocated, allocations shall be assigned. Then utilization is tracked - burn down how much of allocated is used.
     - name: Aims, principles, alignments
       markdown-description: |+2
         Aim is a a concrete base class for Objective, KeyResult, Persona Goal, and Principle. Principle is hierarchical. Steal principle definition from TOGAF. 
         Endeavor has alignment homogenous strict containment reference. Alignment is a model element referencing Aim. allAlignments derived reference.
         Aim has derived opposite reference - alignements. Principle containment homogenous reference under EngineeredElement - e.g. architecture principles for an organization, design/coding principles for a component.
         Consider ``extends`` relationship between principles. E.g. module level principle extends a more generic organization level principle. Many-to-many relationship.   
     - name: YAML spec examples
       markdown-description: Add to documentation.             
     - name: Documents and sections
       markdown-description: |+2
         Engineered elements, partial support of action configuration - section style, section role - e.g. a section can be shown as context action or on the content panels - left or right. Category support too. Content is displayed in the first nav, inherited info in the second. 
         Other options are dialog, collapsible, and context action which calls super.doGenerate() - do not cache. Add support of resources and directories in the UI where to keep documents. 
         Document extends section. Table of contents configuration (not component) - location (e.g. right navigation), style - list/table, title (optional), depth.              
     - name: Extract ModelElement, NamedElement, Appearance, ... to a common model
       markdown-description: |+2
         Including ViewAction classes. Also Document, Section, Reference, Link.  
         The model should be a part of Core and Gen classes part of HTML. Would allow to relatively quickly build new models on top. 
         Also extract activities, journeys (rename to flows as more generic) into a common model.
         Consider dropping existing NCore and replace with with this new one. Keep original concrete classes in the engineering model as
         sub-classes of the extracted classes for future extensibility and model spec compatibility.                
     - name: Parent reference to Engineer
       markdown-description: |+2
         For bottom-up linking during generation of federated sites. Similar to bottom-up linking in Eclipse documentation.                
     - name: Appearance icon and description
       markdown-description: |+2
         Implement support for icon and descriptions. Also section-style.                  
     - name: Appearance view-action
       markdown-description: |+2
         ``viewAction``/``view-action`` - FQN of a class or static method which creates ViewAction's for model elements and features.
         Static method name is separated from class name with ``::`` as in method references. Adapter factory takes appearance into account and for features ModelElementViewAction first
         checks appearance before calling featureActions - i.e. customizations trump overrides. For features the factory method may return an array or a collection or an iterable or a stream.
         For model elements method/constructor takes 2 arguments - target and factory. For features - also two arguments - semantic element view action and feature.
         Document in appearance--view-action.md with examples. Consider an option with "Call" class as in org.nasdanika.exec.Call - class name is a default feature and then method, init, etc.
         Maybe as an improvement - start just with class name and method name and ``::`` as a shortcut for specifying class and method name as one string.                  
     - name: Persona avatar
       markdown-description: |+2
         Image URL or a class with URL being a default property and an option so specify height and width. Display in the properties table.                  
     - name: Reference and Link
       markdown-description: |+2
         Named elements. Reference points to a model element in the resource set by URI. URI is the default feature. Name, description are "inherited" from the target if not set explicitly.
         Referrers derived opposite reference to NamedElement.
         Link points to URL, which is also a default property.                   
     - name: Profiles
       markdown-description: |+2
         Nested. Contain context properties and appearance. Properties and apperance are inherited by child profiles.
         Generation - utility methods to generate for a profile. Profiles reference to model element - included/excluded. A way to support multiple stakeholder views.                    
         
     ### === Done === ###    
     - name: Start/end from Issue and Increment to Endeavor
       increment: nasdanika:increments/2021/children/q2/children/may
       status: nasdanika:issue-statuses/done
       markdown-description: |+2
         For Issue with children, Release and Feature - default to derived from scheduled issues. For issues add validation - children shall be within parent if parent start/end is set.
         For releases compute default increment from the end date in the same way as for issues. 
     - name: Move assignee from Issue to Endeavor
       increment: nasdanika:increments/2021/children/q2/children/may
       status: nasdanika:issue-statuses/done
       markdown-description: |+2
         So releases, features, and increments may have engineers tracking/driving execution/delivery. Rework the assignments section in Engineer to have sub-sections - increments, releases, features, issues.
         Hide endeavors with zero total cost (e.g. incrments without scheduled releases or issues), and completed. To documentation - composite effort assignees are responsible for tracking and escalation/removal of obstacles,
         e.g. increment assignee is kinda scrum master and release/feature assignee is kinda project manager. 
   allocations:
     - endeavor: nasdanika:increments/2021/children/q2/children/jun
       engineer: pavel:this
       effort: 30
       markdown-description: Sample allocation.
            
                           
   