engineering-module:
  name: Generation Adapters
  path: gen
  action-prototype: "../javadoc-action-prototype.xml#/"
  dependencies:
    - engineering://nasdanika/modules/engineering/modules/model
    - engineering://nasdanika/modules/html/modules/flow     
  issues:
    appearance:
      name: Configurable appearance
      description: |+2
        Showing/hiding/placement - child, navigation, section, .../styling - icons.
        Perhaps appearance model and not specific just to engineering, but generic and handled at EObjectActionProvider with extensibility.
        References with eKeys shall make it easy to build such a model - class(ifier) and feature keys. 
        More complex with operations, but it is an edge case.        
        Modal actions. Cascading appearance. Ability to define Bootstrap appearance - extend?  
        Custom properties, e.g. to show/hide columns in issue tables.        
    rest-api:
      name: REST API
      description: |+2
        Generate static cross-refrencing JSON files which can be used for programmatic access by, say, single-page applications. For example, an issues table with filtering and sorting or by charts.   
        May also generate a JavaScript API on top of the JSON "dumb" data - read-only properties returning promises.
        Ideally, the JSON should be loadable back to the model. Also may publish XMI at the root of the generated site - an alternative to Maven repository.      
    help-dialogs:
      name: Help dialogs
      description: Markdown help resource. Superscript question mark if present.    
    in-browser-editing:
      name: In-browsing editing feature
      description: Collaboration, inner source. Create pull request. Related to Data Provenance.
    configurable-tables:
      name: Configurable tables
      description: |+2 
        Sortable, filterable, pagination, column selection - remember in local storage. Consider using Vue, Knockout is obsolete - 
        https://v3.vuejs.org/guide/introduction.html#getting-started
        Forms doc: https://vuejs.org/v2/guide/forms.html, https://bootstrap-vue.org/docs/components/form-checkbox, https://vuejs.org/v2/guide/events.html Form example: https://codepen.io/riix/pen/MeYogB
        https://codepen.io/zhaoqize/pen/JWGGrL, https://codepen.io/beyondverage0908/pen/ebWzYj 
        https://codepen.io/pespantelis/pen/ojwgPB, see my modifications in vue.md
        https://www.raymondcamden.com/2018/02/08/building-table-sorting-and-pagination-in-vuejs
        Paginated table: https://codepen.io/cslinmiso/pen/pbqALW
        React is also an option, but Vue seems to be simpler: https://codesandbox.io/embed/table-sorting-example-ur2z9?fontsize=14&hidenavigation=1&theme=dark
        https://github.com/wenzhixin/bootstrap-table 
        Make a reusable component? Or a method, say buildDynamicTable() similar to buildTable().
        Table configuration also bordered, striped, condensed, etc.
        https://cdnjs.com/libraries/vue
        https://techformist.com/use-vue-from-url-simple-app/ https://cdn.jsdelivr.net/npm/vue@3.2.24
        Also render data as either hidden text or static table for search indexing - configurable.
    git-marker-message-enrichment:
      name: GitMarker Message Enrichment
      description: Enrhich topic messages and topics themselves with GitMarker information - author, date if not set. May not work correctly with pull requests - need to check - maybe author remains and only committer changes. 
    engineer-activity:
      name: Engineer activity
      description: Messages, notes, issues (assignments). Filtering - date range, increments. Use for plans, e.g. what's next and progress reports - what has been done. 
    issues-table:
      name: issuesTable() methods
      description: Generate items for all available features or at least the most of them. Take arguments for feature/column visibility, sortability, and filterability. Support of keying by model element and by string for computed features.  
    element-tables:
      name: Element table methods
      description: Similar to issue tables. Include aggregated things, e.g. reportedIssues, messages, assignments for engineers - numbers linking to respective pages. Create child issues for each model element.   
    element-icons:
      name: Element icons from action prototypes
      description: Update action providers to set an icon only if it is not already set by a prototype action.   
    marker-relative-drawio-representation:
      name: Marker-relative drawio representations 
      description: Currently is resolved relative to the instance model. If URL starts with ./ resolve relative to the marker. Or interpolate with ${marker-location} token.   
   