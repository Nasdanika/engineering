engineering-module:
  name: Gen
  path: gen
  representations:
    - representation-component-diagram: true
  dependencies:
    - nasdanika:modules/engineering/modules/model
    - nasdanika:modules/html/modules/emf     
  issues:
    action-template:
      name: Action template
      description: |+2
        Action template reference. If set then the action would be copied and then populated. 
        This would allow to merge actions generated by other tools. E.g. ecore documentation actions or actions referencing ecore documentation.  
    appearance:
      name: Configurable appearance
      description: |+2
        Showing/hiding/placement - child, navigation, section, .../styling - icons.
        Perhaps appearance model and not specific just to engineering, but generic and handled at EObjectActionProvider with extensibility.
        References with eKeys shall make it easy to build such a model - class(ifier) and feature keys. 
        More complex with operations, but it is an edge case.        
        Modal actions. Cascading appearance. Ability to define Bootstrap appearance - extend?  
        Custom properties, e.g. to show/hide columns in issue tables.        
    rest-api:
      name: REST API
      description: |+2
        Generate static cross-refrencing JSON files which can be used for programmatic access by, say, single-page applications. For example, an issues table with filtering and sorting or by charts.   
        May also generate a JavaScript API on top of the JSON "dumb" data - read-only properties returning promises.
        Ideally, the JSON should be loadable back to the model. Also may publish XMI at the root of the generated site - an alternative to Maven repository.      
    help-dialogs:
      name: Help dialogs
      description: Markdown help resource. Superscript question mark if present.    
   
       ### 2021.5.0 ###
     
     - name: Do not show all issues if equal to issues
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       effort: 1 
       status: nasdanika:issue-statuses/done
     - name: Show benefit in increment summary tables
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       effort: 1 
       status: nasdanika:issue-statuses/done
     - name: Module column in releases table
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       status: nasdanika:issue-statuses/done
       effort: 1 
     - name: Feature role
       description: Create an enum for feature role - NONE, PROPERTY, CONTENT, CHILD (e.g. section). Refactor to use the role so the same feature is not shown twice by omission. 
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       status: nasdanika:issue-statuses/done
       effort: 1 
     - name: Do not sort increments and releases by name
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       status: nasdanika:issue-statuses/done
       path: no-sort
       effort: 1 
     - name: Link token replacement in diagrams
       description: Service computer in order to use the context of the action. Also markdownDescription attribute because otherwise markdown is generated at model loading time.
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       status: nasdanika:issue-statuses/done
       path: diagrams-link-token-replacement
       effort: 1 
     - name: Experts reference
       description: Have expertise, but not authority.
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       status: nasdanika:issue-statuses/done
       effort: 1
       
       ### --> 
       
     - name: Document the model
       description: 
         exec-styled-markdown: Model and dialogs [Purum](${link/nasdanika:modules/engineering/modules/gen})  
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       effort: 4 
     - name: Increment roll-up stats
       description: |+2
         Effort, cost, percentage completion. Own and total - own and children. 
         Also totals summary table. Also children as a summary table. Completed with 100% - SUCCESS. In the past and not completed - DANGER. 
         Linear extrapolation and WARNING is behind schedule for a specified margin, e.g. 10%.    
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       effort: 4 
       children:
         - name: Sample child
           effort: 6
           notes:
             - date: 2021/05/13
               effort: 2
     - name: Completion derived attribute
       description: In engineered capability - release, feature, issue. Show in properties. Along with effective benefit, cost, etc. Kinda duplicate.  
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       categories: nasdanika:issue-categories/good-first-issue       
       effort: 4 
       notes:
         - date: 2021/05/12
           markdown-description: Implemented for Issue. Need to implement for Release and Feature. Also for Increment - derived from issues and releases scheduled for the increment. Show in the summary table for increments.
           effort: 2
           status: nasdanika:issue-statuses/in-progress
     - name: Notes
       description: |+2
         Loading from the model, show in the view. Remaining effort and remaining cost attributes. If not set then remaining is calculated as a subtraction of spent from previous remaining.
         So the calculation is a running total with ability to override. 
         Remaining cost and effort to engineered capability, but derived. Also totals. And completion percentage. 
       increment: nasdanika:increments/2021/children/q2/children/may
       releases: nasdanika:modules/engineering/releases/2021/5/0
       notes:
         - date: 2021/05/11
           markdown-description: Notes work. Need to add effectiveStatus derived from issue status if it is set and last note status otherwise.
           effort: 1
           remaining-effort: 1
           status: nasdanika:issue-statuses/in-progress
         - date: 2021/05/11
           markdown-description: Default status (if not set) is computed from the last note with set status or from the first status in ancestor engineer if there are notes with status.
           status: nasdanika:issue-statuses/done
       effort: 2
     - name: Increment view
       description: All issues and children summary table like for engineers. 
     - name: Cost, effort, benefit, remaining XXX, completion to increment, release, and feature
       description: |+2
         Perhaps some base interface (endeavor). Benefit duality - is not explicitly set is computed from contributing things. E.g. increment benefit computed from release and issue benefits.
         Release benefit computed from feature benefits. For issues, if not set, benefit is computed from the container benefit or release/feature benefit. I.e. feature benefit is spread over
         contributing features. 

       ### Backlog ###
       
     - name: Move requires to EngineeredCapabilty 
       description: |+2
         So release and feature can also specify requirements to support high-level roadmapping.
         Introduce allRequirements derived reference. For issue it would be issue's own requirements and requirements of its children.
         For release - own requirements and requirements of features and issues.
         And for features - own requirements and requirements of issues contributing to the feature.
         allRequirements shall not include "contained" requirements. E.g. for child issues if one child requires another it shall not be
         shown. For features if one contributing issue requires another also contributing issue it shall not be shown.
         The same for releases - if two features or issues in the release have requires dependency it shall not be included.
         All requirements reference can be used to generate Gantt roadmap diagrams for products, engineers, and increments.           
       effort: 4 
     - name: Start/end dates to EngineeredCapabilty 
       description: |+2
         Validations that end falls into the increment and other things, e.g. requirements end shall be before required start.   
       effort: 2 
     - name: Filterable and sortable table component - use KnockoutJs 
       description: |+2
         May start with a method in ModelElementViewAction. Then extract into a component which takes descriptors. 
         Introduce EMF components or descriptor adaptor/wrapper including collections wrapper.
         Also, along the same lines - single object properties table using the existing descriptor table components.
         Inject scripts into the head if head consumer is available or below or above the table otherwise.  
       effort: 4 
     - name: Issue effort, cost, benefit, and benefit to cost ratio derived attributes, isWorkable(Increment) function.
       description: |+2
         Actual effort and cost - sum of effort and cost from notes. 
         Also percentage completed - own and effective. progress and effectiveProgress derived attributes.
         Total effort and cost - actual plus in the effort/cost field - estimated remaining (zero if done).
         Effective effort and cost - actual and total (3 effective costs and efforts) - includes all not done children and all not done requirements.
         Introduce EngineeredCapability with derived costs, efforts, and benefits. Issue, feature, and release extend it.
         Effective benefit, total benefit - collected in the opposite way as requirements - in the direction of parent and requiredBy.
         Use HashSet accumulator to avoid loops and scanning issues more than once - derived references allRequirements, allRequiredBy
         Update issue tables with the new attributes.
         Engineer rate - to convert effort to cost. Default is 1.
         Plan can override rate per increment, iherits from engineer if not overridden.
         Percentage completed for releases, features, etc.  
       increment: nasdanika:increments/2021/children/q2/children/may
       effort: 4 
     - name: Display effort and cost
       description: Issues table and section display aggregated costs, efforts, benefit and benefit to cost ratio. Per increment and total for engineer, engineered element, category, etc.  
       increment: nasdanika:increments/2021/children/q2/children/may
       #releases: nasdanika:modules/engineering/releases/2021/5/0
       effort: 4 
     - name: Validations
       description: Issue - scheduled for an increment before one of required issues increments. Add isBefore() and isAfter() functions to increment - move code from view action.  
       effort: 2 
     - name: Persona goals, activities, journeys
       description: Modeling, diagram, weights, derive benefit.   
       effort: 8 
       increment: nasdanika:increments/2021/children/q2/children/may
     - name: Issue diagram
       description: State diagram showing nesting, dependencies, completion status - light green, workability status - gray if not workable. Clickable.
       effort: 3         
     - name: Planning and scheduling
       description: |+2
         Plan - contains capacity per icrement per engineer and cost budget. Scheduler allocates issues to increments to achieve maximum effective benefit per cost ratio for the increment. 
         How to handle spill-over issues?
         Benefit discount rate - how much more the present benefit is valued over future benefit. Related to it - even benefit stream as well as allocation to categories.          
       effort: 8         
     - name: Journey to engineering export
       description: |+2
         During generation create YAML engineering model from journey definition with back-links to definitions. 
         Activities and journeys map to issues, personas map to engineers. 
         I.e. journey is a template for an engineering model which then can be executed and tracked.  
     - name: MavenModule extends Module?
       description: Group ID, artifact ID, repository if not default.
     - name: Refactor to output HTML App model
       description: More flexible as it would allow to construct larger sites from multiple models. Requires implementing bootstra table and list of actions component.
     - name: Journey inheritance
       description: superJourney and subJourneys links the first is a proxy, the second is derived. Opposite. Override by path match. Would also need allElements derived reference - own and inherited.
     - name: Engineer view
       description: Modules - list of actions. Increments as a hierarhical table (with indents) and stats - total number of issues, by status.
     - name: Issue status appearance or just color?
       description: E.g. blocked in danger.
     - name: Issue and increment visualizations
       description: Issue - pert chart (state diagram) with color coding of statuses. Increment - gantt or gantts for issues and also for features and releases. Release as a milestone.
     - name: Announce initial release
       description: Presentation, video, post on LinkedIn. After restructuring the Nasdanika site to use Engineering. A tree of innovation - seed and grow your ideas and products.
     - name: Org visualizations
       description: WBS dialect org charts.
     - name: URI copy to clipboard button similar to GitHub clone URL. 
       description: Or a click on a cell copies to clipboard - change cursor and show tooltip.
     - name: Aliasing
       description: |+2
         In a multi-model scenario all elements with the same URI will be logically merged and will appear as a single object in the UI.
         That single object may be explicitly designated by setting "primary" attribute to true computed as the first object found in the hierarchy by the content iterator.
     - name: Increment summary tables completion percentages
       description: Use done flag and remaining effort/logged effort. For the increment - engieers. Children. Self, total - self and children.  
     - name: Configurable colors
       description: Methods in the factory to obtain colors. Remove parent and resolver from constructors.
     - name: Improve diagnostic readability
       description: Filter-out success in dumps. Possibly output to HTML (app) with tree in the nav panel. Or generate site anyway and output diagnostics in the UI and a summary page with all errors and warnings. 
     - name: Diagram style to model elements
       description: Some kind of a map. E.g. ability to display issues or releases differently on Gantt based on workability and issue status.  
     - name: Progress bars in for percentages
       markdown-description: "[Bootstrap progress bar](https://getbootstrap.com/docs/4.0/components/progress/#labels)"  
     - name: Diagnostic summary
       markdown-description: |+2
         Section at engineered element level and context at principal action level.
         Implement as a protected method in SimpleEObjectViewAction. Danger/Warning color, notification - number of errors/warnings.
         Table - link to sources if adaptable to view actions.  
     - name: Allocations, designations, and capacity
       markdown-description: Sections with tables. Increment total capacity and utilization.       
     - name: Includes reference to releases and maybe features
       markdown-description: includes/partOf. For composite releases. Requires/requiredBy to Engineered Capability or introduce CompositeEngineeredCapability.       
     - name: none literal to icon
       markdown-description: Suppresses inherited icon.       
     - name: Engineers feature action
       markdown-description: |+2
         Table with engineer name and stats - owns, expert, number of issues, number of messages.
         Provisions for additional stats - context service. E.g. number of commits.       
     - name: Issue statuses feature action
       markdown-description: Table with status name, description, and number of issues in the status.       
     - name: Issue categories feature action
       markdown-description: Table with category name, description, and number of issues in the category.       
     - name: Sliding navigation panel
       markdown-description: Ability to hide if it takes too much real estate and then bring back. Navigation toggle context action with just an icon.       
     - name: Journey Elements getting default values from the overriden element
       markdown-description: |+2
         If a journey element or transition overrides another element and some feature is not set then its default value should be taken the overriden element.
         See if it can be done "in bulk" by overriding eDynamicGet(). Do it for attributes and maybe some references. Or maybe better handle at the UI level by
         overriding featureValue() for references - a tricky part, and at the model level for attributes.         
     - name: Component dependency diagrams
       markdown-description: Once representations are supported. Depth - both in and out.
     - name: Resource uploading
       markdown-description: Maybe a duplicate. ${resource/<resource url>} - stores to resource manager and returns a relative URL. E.g. for PDF's, sources, etc.
     - name: Icons for model elements to default-appearance
       markdown-description: Document, link, reference, ...
     - name: Actions reference - EObject or ModelElement?
       markdown-description: Or resources is enough?
     - name: Properties
       markdown-description: |+2
         Property, property entry. Properties at the model element. allProperties similar to allSections - Map collects taking inheritance (for jouney elements and documents) and
         containment (for all elements) into consideration. Usage - interpolation tokens - call in createContext(). E.g. inherit section text, but interpolate with tokens for this journey/document. 
     - name: Issue categories, priorities, severities, and statuses cross-reference
       markdown-description: |+2
         E.g. for statuses - total and for each priority and severity. Or maybe just priority.
         For priorities - total and for each status.
         Categories - maybe. Add properties to appearance and methods to retrieve cascading properties. Cross-referencing shall be configurable via properties.
     - name: Org. chart representation
       markdown-description: |+2
         ownerBased - boolean flag, if true show owners for orgs, not names.
         depth, layout - whatever is supported by https://plantuml.com/wbs-diagram. Coloring based on diagnostic - flag. 
     - name: Component diagram coloring based on diagnostic
       markdown-description: |+2
         Configuration flag.
     - name: Move start/end computation for releases etc to the gen layer
       markdown-description: |+2
         In memberValue() to avoid stack overflows - Release, Feature, 
     - name: Breakdowns in dialogs
       markdown-description: |+2
         E.g. engineer assignments, priority or category issues by statuses, statuses by priority, category by status and by priority. 

#### Done ####

     - name: Engineer owned elements
       description: Back-reference and list.  
       increment: nasdanika:increments/2021/children/q2/children/apr
       releases: nasdanika:modules/engineering/releases/2021/5/0
       status: nasdanika:issue-statuses/done
       effort: 1 
   
       ### 2021.4.4 ###
        
     - name: Features and releases
       description: Basic support. Add issues for visualizations (gantt) and aggregations. Issue to release association.
       releases: 
         - nasdanika:modules/engineering/releases/2021/4/4
       increment: nasdanika:increments/2021/children/q2/children/apr
       contributes-to:
         - nasdanika:modules/engineering/features/test
       effort: 3 
       status: nasdanika:issue-statuses/done
   